{
  "src/components/ui/breadcrumbs/breadcrumbs.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BreadcrumbsRoot",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The styles of the breadcrumbs."
        },
        "separator": {
          "required": false,
          "tsType": {
            "name": "ReactElement",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ],
            "raw": "ReactElement<HTMLElement>"
          },
          "description": "The separator between the breadcrumbs."
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "React.ReactNode | ((item: T) => React.ReactNode)",
            "elements": [
              {
                "name": "ReactReactNode",
                "raw": "React.ReactNode"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "The breadcrumb items."
        }
      },
      "composes": [
        "Omit"
      ]
    }
  ],
  "src/components/ui/button-group/button-group.tsx": [
    {
      "description": "Displays a group of buttons with matching styles.",
      "methods": [],
      "displayName": "UnstyledButtonGroup",
      "props": {
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "The children of the button group."
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The styles of the button group."
        }
      }
    }
  ],
  "src/components/ui/badge/badge.tsx": [
    {
      "description": "Displays a Badge",
      "methods": [],
      "displayName": "Badge",
      "props": {
        "before": {
          "required": false,
          "tsType": {
            "name": "ReactReactElement",
            "raw": "React.ReactElement<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": "Element shown before the child"
        },
        "after": {
          "required": false,
          "tsType": {
            "name": "ReactReactElement",
            "raw": "React.ReactElement<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": "Element shown after the child"
        }
      },
      "composes": [
        "HTMLAttributes",
        "BadgeVariantsProps"
      ]
    }
  ],
  "src/components/ui/card/card.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Card"
    },
    {
      "description": "",
      "methods": [],
      "displayName": "CardTitle"
    },
    {
      "description": "",
      "methods": [],
      "displayName": "CardContent"
    },
    {
      "description": "",
      "methods": [],
      "displayName": "CardDescription"
    },
    {
      "description": "",
      "methods": [],
      "displayName": "CardFooter"
    },
    {
      "description": "",
      "methods": [],
      "displayName": "CardHeader"
    }
  ],
  "src/components/ui/calendar/calendar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Calendar",
      "props": {
        "error": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The error message to display if the calendar is invalid."
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The styles of the calendar."
        }
      },
      "composes": [
        "Omit"
      ]
    }
  ],
  "src/components/ui/button/button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Button"
    }
  ],
  "src/components/ui/checkbox-group/checkbox-group.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "CheckboxGroup",
      "props": {
        "label": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The className of the checkbox group."
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "Checkbox or any other components to render in the checkbox group."
        },
        "helperText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A subtle description next to the checkbox groups label."
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The error message of the checkbox group."
        }
      },
      "composes": [
        "Omit"
      ]
    }
  ],
  "src/components/ui/checkbox/checkbox.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Checkbox"
    }
  ],
  "src/components/ui/combo-box/combo-box.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ComboBox",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The styles of the combo box."
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The label of the combo box."
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "The description of the combo box."
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "The error message to display if the combo box is invalid."
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "React.ReactNode | ((item: T) => React.ReactNode)",
            "elements": [
              {
                "name": "ReactReactNode",
                "raw": "React.ReactNode"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "The combo box items."
        }
      },
      "composes": [
        "Omit"
      ]
    }
  ],
  "src/components/ui/command/command.tsx": [
    {
      "description": "Displays a command with a title and a list of actions.",
      "methods": [],
      "displayName": "UnstyledCommand",
      "props": {
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": "The children of the command."
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name to apply to the command."
        },
        "onOpenChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(isOpen: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isOpen"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback when the command is opened or closed."
        },
        "shortcut": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "union",
                "raw": "keyof typeof Keys",
                "elements": [
                  {
                    "name": "literal",
                    "value": "Backspace"
                  },
                  {
                    "name": "literal",
                    "value": "Tab"
                  },
                  {
                    "name": "literal",
                    "value": "Enter"
                  },
                  {
                    "name": "literal",
                    "value": "Shift"
                  },
                  {
                    "name": "literal",
                    "value": "Control"
                  },
                  {
                    "name": "literal",
                    "value": "Alt"
                  },
                  {
                    "name": "literal",
                    "value": "Pause"
                  },
                  {
                    "name": "literal",
                    "value": "CapsLock"
                  },
                  {
                    "name": "literal",
                    "value": "Escape"
                  },
                  {
                    "name": "literal",
                    "value": "Space"
                  },
                  {
                    "name": "literal",
                    "value": "PageUp"
                  },
                  {
                    "name": "literal",
                    "value": "PageDown"
                  },
                  {
                    "name": "literal",
                    "value": "End"
                  },
                  {
                    "name": "literal",
                    "value": "Home"
                  },
                  {
                    "name": "literal",
                    "value": "LeftArrow"
                  },
                  {
                    "name": "literal",
                    "value": "UpArrow"
                  },
                  {
                    "name": "literal",
                    "value": "RightArrow"
                  },
                  {
                    "name": "literal",
                    "value": "DownArrow"
                  },
                  {
                    "name": "literal",
                    "value": "Insert"
                  },
                  {
                    "name": "literal",
                    "value": "Delete"
                  },
                  {
                    "name": "literal",
                    "value": "Meta"
                  },
                  {
                    "name": "literal",
                    "value": "Key0"
                  },
                  {
                    "name": "literal",
                    "value": "Key1"
                  },
                  {
                    "name": "literal",
                    "value": "Key2"
                  },
                  {
                    "name": "literal",
                    "value": "Key3"
                  },
                  {
                    "name": "literal",
                    "value": "Key4"
                  },
                  {
                    "name": "literal",
                    "value": "Key5"
                  },
                  {
                    "name": "literal",
                    "value": "Key6"
                  },
                  {
                    "name": "literal",
                    "value": "Key7"
                  },
                  {
                    "name": "literal",
                    "value": "Key8"
                  },
                  {
                    "name": "literal",
                    "value": "Key9"
                  },
                  {
                    "name": "literal",
                    "value": "KeyA"
                  },
                  {
                    "name": "literal",
                    "value": "KeyB"
                  },
                  {
                    "name": "literal",
                    "value": "KeyC"
                  },
                  {
                    "name": "literal",
                    "value": "KeyD"
                  },
                  {
                    "name": "literal",
                    "value": "KeyE"
                  },
                  {
                    "name": "literal",
                    "value": "KeyF"
                  },
                  {
                    "name": "literal",
                    "value": "KeyG"
                  },
                  {
                    "name": "literal",
                    "value": "KeyH"
                  },
                  {
                    "name": "literal",
                    "value": "KeyI"
                  },
                  {
                    "name": "literal",
                    "value": "KeyJ"
                  },
                  {
                    "name": "literal",
                    "value": "KeyK"
                  },
                  {
                    "name": "literal",
                    "value": "KeyL"
                  },
                  {
                    "name": "literal",
                    "value": "KeyM"
                  },
                  {
                    "name": "literal",
                    "value": "KeyN"
                  },
                  {
                    "name": "literal",
                    "value": "KeyO"
                  },
                  {
                    "name": "literal",
                    "value": "KeyP"
                  },
                  {
                    "name": "literal",
                    "value": "KeyQ"
                  },
                  {
                    "name": "literal",
                    "value": "KeyR"
                  },
                  {
                    "name": "literal",
                    "value": "KeyS"
                  },
                  {
                    "name": "literal",
                    "value": "KeyT"
                  },
                  {
                    "name": "literal",
                    "value": "KeyU"
                  },
                  {
                    "name": "literal",
                    "value": "KeyV"
                  },
                  {
                    "name": "literal",
                    "value": "KeyW"
                  },
                  {
                    "name": "literal",
                    "value": "KeyX"
                  },
                  {
                    "name": "literal",
                    "value": "KeyY"
                  },
                  {
                    "name": "literal",
                    "value": "KeyZ"
                  },
                  {
                    "name": "literal",
                    "value": "LeftMeta"
                  },
                  {
                    "name": "literal",
                    "value": "RightMeta"
                  },
                  {
                    "name": "literal",
                    "value": "Select"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad0"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad1"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad2"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad3"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad4"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad5"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad6"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad7"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad8"
                  },
                  {
                    "name": "literal",
                    "value": "Numpad9"
                  },
                  {
                    "name": "literal",
                    "value": "Multiply"
                  },
                  {
                    "name": "literal",
                    "value": "Add"
                  },
                  {
                    "name": "literal",
                    "value": "Subtract"
                  },
                  {
                    "name": "literal",
                    "value": "Decimal"
                  },
                  {
                    "name": "literal",
                    "value": "Divide"
                  },
                  {
                    "name": "literal",
                    "value": "F1"
                  },
                  {
                    "name": "literal",
                    "value": "F2"
                  },
                  {
                    "name": "literal",
                    "value": "F3"
                  },
                  {
                    "name": "literal",
                    "value": "F4"
                  },
                  {
                    "name": "literal",
                    "value": "F5"
                  },
                  {
                    "name": "literal",
                    "value": "F6"
                  },
                  {
                    "name": "literal",
                    "value": "F7"
                  },
                  {
                    "name": "literal",
                    "value": "F8"
                  },
                  {
                    "name": "literal",
                    "value": "F9"
                  },
                  {
                    "name": "literal",
                    "value": "F10"
                  },
                  {
                    "name": "literal",
                    "value": "F11"
                  },
                  {
                    "name": "literal",
                    "value": "F12"
                  },
                  {
                    "name": "literal",
                    "value": "NumLock"
                  },
                  {
                    "name": "literal",
                    "value": "ScrollLock"
                  },
                  {
                    "name": "literal",
                    "value": "Semicolon"
                  },
                  {
                    "name": "literal",
                    "value": "Equals"
                  },
                  {
                    "name": "literal",
                    "value": "Comma"
                  },
                  {
                    "name": "literal",
                    "value": "Dash"
                  },
                  {
                    "name": "literal",
                    "value": "Period"
                  },
                  {
                    "name": "literal",
                    "value": "ForwardSlash"
                  },
                  {
                    "name": "literal",
                    "value": "GraveAccent"
                  },
                  {
                    "name": "literal",
                    "value": "OpenBracket"
                  },
                  {
                    "name": "literal",
                    "value": "BackSlash"
                  },
                  {
                    "name": "literal",
                    "value": "CloseBracket"
                  },
                  {
                    "name": "literal",
                    "value": "Quote"
                  }
                ]
              }
            ],
            "raw": "Array<Keys>"
          },
          "description": "Shortcut keys to open the command.",
          "defaultValue": {
            "value": "[\"Meta\", \"KeyK\"]",
            "computed": false
          }
        },
        "searchField": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "The search field to display in the command."
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the command is open."
        },
        "onSearchChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback when the search value changes."
        },
        "searchValue": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The values to search for."
        },
        "disableIntegratedSearch": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether to disable the integrated search.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/ui/data-list/data-list.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "UnstyledDataList"
    }
  ],
  "src/components/ui/date-field/date-field.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DateField",
      "props": {
        "label": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "helperText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A helper text to display below the date field."
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | ((validation: ValidationResult) => string)",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "The error message to display if the date field is invalid."
        }
      },
      "composes": [
        "AriaDateFieldProps"
      ]
    }
  ],
  "src/components/ui/date-picker/date-picker.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DatePicker",
      "props": {
        "label": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "helperText": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "A helper text to display below the date picker."
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | ((validation: ValidationResult) => string)",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "The error message to display when the date picker is invalid."
        }
      },
      "composes": [
        "AriaDatePickerProps"
      ]
    }
  ],
  "src/components/ui/dialog/dialog.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Dialog",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      },
      "composes": [
        "AriaModalOverlayProps"
      ]
    }
  ],
  "src/components/ui/form/form.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "UnstyledFormDescription"
    }
  ],
  "src/components/ui/heading/heading-levels.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "HeadingLevel",
      "props": {
        "level": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "1 | 2 | 3 | 4 | 5 | 6",
            "elements": [
              {
                "name": "literal",
                "value": "1"
              },
              {
                "name": "literal",
                "value": "2"
              },
              {
                "name": "literal",
                "value": "3"
              },
              {
                "name": "literal",
                "value": "4"
              },
              {
                "name": "literal",
                "value": "5"
              },
              {
                "name": "literal",
                "value": "6"
              }
            ]
          },
          "description": "The heading level. By default, it'll increase the level by 1 based on the\ncontext."
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ui/heading/heading.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Heading"
    }
  ],
  "src/components/ui/highlight/highlight.tsx": [
    {
      "description": "Displays a Text with highlighted characters",
      "methods": [],
      "displayName": "Highlight",
      "props": {
        "children": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Element that will be rendered highlighted"
        },
        "highlight": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | string[]",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "string[]"
              }
            ]
          },
          "description": "Elements characters that will be highlighted",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "minLengthToHighlight": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Minimum length to highlight",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/ui/input/input.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Input"
    }
  ],
  "src/components/ui/kbd/kbd.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Kbd",
      "props": {
        "size": {
          "defaultValue": {
            "value": "\"xs\"",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
  "src/components/ui/label/label.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "LabelRoot",
      "props": {
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        }
      },
      "composes": [
        "AriaLabelProps"
      ]
    }
  ],
  "src/components/ui/link/link.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Link",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      },
      "composes": [
        "AriaLinkProps",
        "VariantProps"
      ]
    }
  ],
  "src/components/ui/loading-spinner/loading-spinner.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "LoadingSpinner",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "ReactReactElement",
            "raw": "React.ReactElement<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": ""
        }
      },
      "composes": [
        "VariantProps"
      ]
    }
  ],
  "src/components/ui/modal/modal.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Modal",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      },
      "composes": [
        "AriaModalOverlayProps"
      ]
    }
  ],
  "src/components/ui/popover/popover.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Popover",
      "props": {
        "offset": {
          "defaultValue": {
            "value": "4",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
  "src/components/ui/progress-bar/progress-bar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ProgressBar",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactReactElement",
            "raw": "React.ReactElement<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": ""
        }
      },
      "composes": [
        "AriaProgressBarProps",
        "VariantProps"
      ]
    }
  ],
  "src/components/ui/radio-group/radio-group.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Radio",
      "props": {
        "showRadio": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      },
      "composes": [
        "AriaRadioProps"
      ]
    },
    {
      "description": "",
      "methods": [],
      "displayName": "RadioGroup",
      "props": {
        "label": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "helperText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | ((validation: ValidationResult) => string)",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": ""
        },
        "orientation": {
          "defaultValue": {
            "value": "\"vertical\"",
            "computed": false
          },
          "required": false
        }
      },
      "composes": [
        "AriaRadioGroupProps"
      ]
    }
  ],
  "src/components/ui/range-calendar/range-calendar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "RangeCalendar",
      "props": {
        "error": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The error message to display when the date picker is invalid."
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The className to apply styles to the component."
        }
      },
      "composes": [
        "Omit"
      ]
    }
  ],
  "src/components/ui/select/select.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Select",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "React.ReactNode | ((item: T) => React.ReactNode)",
            "elements": [
              {
                "name": "ReactReactNode",
                "raw": "React.ReactNode"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": ""
        }
      },
      "composes": [
        "Omit"
      ]
    }
  ],
  "src/components/ui/separator/separator.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Separator"
    }
  ],
  "src/components/ui/switch/switch.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Switch",
      "props": {
        "label": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "helperText": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      },
      "composes": [
        "SwitchVariantProps",
        "AriaSwitchProps"
      ]
    }
  ],
  "src/components/ui/text-field/text-field.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TextField",
      "props": {
        "label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "helperText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "ref": {
          "required": false,
          "tsType": {
            "name": "any"
          },
          "description": ""
        }
      },
      "composes": [
        "AriaTextFieldProps"
      ]
    }
  ],
  "src/components/ui/time-field/time-field.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TimeField",
      "props": {
        "label": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "helperText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "errorMessage": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | ((validation: ValidationResult) => string)",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": ""
        }
      },
      "composes": [
        "AriaTimeFieldProps"
      ]
    }
  ],
  "src/components/ui/toggle-button/toggle-button.tsx": [
    {
      "description": "Displays a button that can be toggled on and off.",
      "methods": [],
      "displayName": "UnstyledToggleButton",
      "props": {
        "before": {
          "required": false,
          "tsType": {
            "name": "ReactReactElement",
            "raw": "React.ReactElement<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": "The content to display before the toggle button."
        },
        "after": {
          "required": false,
          "tsType": {
            "name": "ReactReactElement",
            "raw": "React.ReactElement<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": "The content to display after the toggle button."
        }
      },
      "composes": [
        "ToggleVariantProps",
        "AriaToggleButtonProps"
      ]
    }
  ],
  "src/components/ui/tooltip/tooltip.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Tooltip",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      },
      "composes": [
        "AriaTooltipProps"
      ]
    }
  ],
  "src/components/ui/typography/typography.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Typography",
      "props": {
        "as": {
          "required": false,
          "tsType": {
            "name": "T"
          },
          "description": ""
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        }
      }
    }
  ]
}

